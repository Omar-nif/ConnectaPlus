// ======================================================================
// Prisma Client generator
// - Genera el cliente tipado para usar Prisma en Node/TS.
// ======================================================================
generator client {
  provider = "prisma-client-js"
}

// ======================================================================
// Datasource (PostgreSQL)
// - Lee la cadena de conexión de la variable de entorno DATABASE_URL.
// ======================================================================
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================================================================
// Modelo: User
// - Representa cuentas de usuario en la app.
// - Relación 1:N con Group (un usuario puede ser dueño de varios grupos).
// ======================================================================
model User {
  id              Int               @id @default(autoincrement())
  name            String?
  email           String            @unique
  password        String
  stripeAccountId String?           // Para Connect
  createdAt       DateTime          @default(now())

  // Relaciones
  groups          Group[]
  payments        Payment[]
  memberships     GroupMembership[] // ← NUEVA relación

  @@map("users")
}

// ======================================================================
// Modelo: Group
// - Grupo creado por un dueño (ownerId).
// - Datos derivados del preset (platformKey/name/planKey, precios, slots).
// - Credenciales se muestran borrosas en FE hasta "pago completado" (lógica FE).
// ======================================================================
model Group {
  id             Int               @id @default(autoincrement())
  ownerId        Int
  owner          User              @relation(fields: [ownerId], references: [id])
  serviceId      Int?              // ← foreign key opcional
  service        Service?          @relation(fields: [serviceId], references: [id])
  platformKey    String
  platformName   String
  planKey        String?
  basePriceMXN   Int
  slots          Int
  pricePerMember Int
  credentials    String
  notes          String?
  status         String            @default("active")
  currentMembers Int               @default(0) // ← NUEVO CAMPO: contador de miembros activos
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  // Relaciones
  payments    Payment[]
  memberships GroupMembership[] // ← NUEVA relación

  @@index([ownerId])
  @@index([serviceId])
  @@map("groups")
}

// ======================================================================
// Modelo: Payment
// ======================================================================
model Payment {
  id                    Int      @id @default(autoincrement())
  userId                Int
  groupId               Int?
  stripePaymentIntentId String   @unique
  amount                Int      // en centavos (ej: 1000 = $10.00)
  currency              String   @default("mxn")
  status                String   @default("pending") // "pending" | "succeeded" | "failed"
  metadata              Json?    // Para datos adicionales
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relaciones
  user  User   @relation(fields: [userId], references: [id])
  group Group? @relation(fields: [groupId], references: [id])

  @@index([userId])
  @@index([groupId])
  @@map("payments")
}

// ======================================================================
// Modelo: Service
// ======================================================================
model Service {
  id           Int      @id @default(autoincrement())
  slug         String   @unique
  name         String
  description  String
  category     String   // 'peliculas-series' | 'programas' | 'musica' | 'juegos'
  basePriceMXN Int?
  slots        Int?
  plans        Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  groups       Group[]

  @@map("services")
}

// ======================================================================
// Modelo: GroupMembership
// - Relación muchos-a-muchos entre User y Group
// - Controla el acceso actual de usuarios a grupos
// ======================================================================
model GroupMembership {
  id        Int      @id @default(autoincrement())
  userId    Int
  groupId   Int
  status    String   @default("active") // "active", "inactive", "expired"
  joinedAt  DateTime @default(now())
  expiresAt DateTime? // Para suscripciones mensuales
  paymentId Int?     // Relación al pago que creó esta membresía

  // Relaciones
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@index([status])
  @@index([expiresAt])
  
  @@map("group_memberships")
}